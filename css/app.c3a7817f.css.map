{"version":3,"sources":["app.c3a7817f.css","webpack:///src/src/App.vue"],"names":[],"mappings":"AAAA,uFAAuF,CC0hBvF,iCACA,YAAA,CACA,gCAAA,CACA,mCACA,CAEA,sBACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aACA,CAEA,4CACA,aACA","file":"app.c3a7817f.css","sourcesContent":["@import url(https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css);\n\n.grid-container[data-v-1b0dd8ec] {\n  display: grid;\n  grid-template-rows: repeat(5, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n}\n#app[data-v-1b0dd8ec] {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n.recommended-settings span[data-v-1b0dd8ec] {\n  display: block;\n}\n\n\n/*# sourceMappingURL=app.c3a7817f.css.map*/","<template>\n  <v-app>\n    <v-main>\n      <v-switch v-model=\"$vuetify.theme.dark\" :label=\"'Dark Theme'\" @change=\"saveDarkTheme()\"></v-switch>\n      <v-container>\n        <h1 v-if=\"show_scores\">Scores</h1>\n        <h2 v-if=\"!show_scores\">\n          {{ this.voting[this.voting.length - 1] ? this.voting[this.voting.length - 1].verdict || '' : '' }}</h2>\n        <v-btn v-if=\"!isVoting && !show_scores\" @click=\"startVoting()\">Track votes</v-btn>\n        <v-btn v-else-if=\"!show_scores\" @click=\"endVoting()\">End voting</v-btn>\n        <v-btn v-if=\"!show_scores\" @click=\"score()\">Score</v-btn>\n        <div v-else style=\"display: inline-block;\">\n          <v-btn @click=\"show_scores = false\">Continue Game</v-btn>\n          <v-btn @click=\"resetGameAndPlayers()\">Reset All</v-btn>\n          <v-btn @click=\"resetGame()\">Reset Game</v-btn>\n        </div>\n        <v-row v-if=\"show_scores\">\n          <v-col\n              v-for=\"(player, i) in rankScores\"\n              :key=\"i\" class=\"col-3 text-left\">\n            <div>\n              <h3>\n                #{{ i + 1 }}\n              </h3>\n              <p>{{ player.name }}</p>\n              <p>{{ player.score }} points</p>\n              <p><span v-for=\"item in player.score_tally\"\n                       :key=\"item\"><strong>{{ item.score > 0 ? '+' + item.score : item.score }}</strong>: {{\n                  item.reason\n                }}<br></span>\n              </p>\n            </div>\n          </v-col>\n        </v-row>\n        <v-row v-else>\n          <v-col v-for=\"(player, i) in players\" :key=\"i\" class=\"col-6\">\n            <v-menu :close-on-content-click=\"false\" v-model=\"menus[i]\" :disabled=\"isVoting\">\n              <template v-slot:activator=\"{on, attrs}\">\n                <v-card v-on=\"on\" v-bind=\"attrs\" :disabled=\"player.voted_out || isDead(i)\">\n                  <v-card-text>\n                    <div class=\"player\" style=\"text-align: left;\">\n                      <img\n                          :src=\"require('./assets/colors/' + (player.color ? (colors[player.color].color) : 'red') + '.webp')\"\n                          :alt=\"(player.color ? (colors[player.color].color) : 'red') + ' crewmate'\" width=\"48px\"\n                          height=\"auto\"\n                          style=\"vertical-align: middle\">\n                      <span class=\"text-h4\" style=\"margin-left: 20px;\">{{ player.name }}\n                      <span v-if=\"isVoting && !player.voted_out && !isDead(player)\" style=\"display:block;\">\n                        <v-btn-toggle v-model=\"votes[i]\" multiple>\n                          <v-btn v-for=\"pl in players\" :key=\"pl.name\" :disabled=\"!isVoteButtonEnabled(pl, i)\">\n                            <v-avatar tile size=\"16\">\n                              <img v-if=\"isVoteButtonEnabled(pl, i)\"\n                                   :src=\"require('./assets/colors/' + (colors[pl.color].color || 'red') + '.webp')\"\n                                   :alt=\"colors[pl.color].color\">\n                              <v-icon v-else>mdi-close</v-icon>\n                            </v-avatar>\n                          </v-btn>\n                        </v-btn-toggle>\n                      </span>\n                      <span v-else-if=\"getKilledBy(player)\" style=\"font-size: 16pt;\">\n                        <br><v-icon>mdi-close</v-icon>Killed by {{ getKilledBy(player).name }}\n                      </span>\n                      <span v-else-if=\"player.voted_out && !player.impostor\" style=\"font-size: 16pt;\">\n                        <br><v-icon>mdi-close</v-icon>Voted out\n                      </span>\n                      <span v-else-if=\"player.voted_out && player.impostor\" style=\"font-size: 16pt;\">\n                        <br><v-icon>mdi-close</v-icon>Voted out (Impostor)\n                      </span>\n                      <span v-else-if=\"player.impostor\" style=\"color: red; font-size: 16pt;\">\n                        <br><v-icon color=\"red\">mdi-skull-crossbones</v-icon>{{ player.kills.length }} kills\n                      </span>\n                      <span v-else style=\"color: green; font-size: 16pt;\">\n                        <br><v-icon color=\"green\">mdi-check</v-icon>Alive\n                      </span>\n                    </span>\n                    </div>\n                  </v-card-text>\n                </v-card>\n              </template>\n              <v-card>\n                <v-card-title>Edit {{ player.name }}</v-card-title>\n                <v-card-text>\n                  <v-text-field v-model=\"players[i].name\"></v-text-field>\n                  <v-btn-toggle v-model=\"players[i].color\" mandatory>\n                    <v-btn v-for=\"object in colors\" :key=\"object.color\" :disabled=\"isColorUsed(object.color)\">\n                      <v-avatar tile size=\"38\">\n                        <img v-if=\"!isColorUsed(object.color)\"\n                             :src=\"require('./assets/colors/' + object.color + '.webp')\" :alt=\"object.color\"/>\n                      </v-avatar>\n                    </v-btn>\n                  </v-btn-toggle>\n                  <v-text-field v-model=\"players[i].notes\" placeholder=\"Notes about this player\"></v-text-field>\n                  <v-checkbox v-model=\"players[i].impostor\" :label=\"'Impostor'\"></v-checkbox>\n                  <div v-if=\"players[i].impostor\">\n                    <p>Kills</p>\n                    <v-select v-model=\"players[i].kills\" single-line multiple :items=\"generateKillsMenu(players[i])\"\n                              label=\"Add kills\"/>\n                  </div>\n                </v-card-text>\n              </v-card>\n            </v-menu>\n          </v-col>\n          <v-col class=\"col-12\">\n            <v-row>\n              <v-card v-if=\"isVoting\" class=\"col-12\">\n                <v-card-text>\n                  <v-col class=\"col-5\">\n                    <!-- Skip Vote -->\n                    <div class=\"player\" style=\"text-align: left;\">\n                      <v-icon x-large>mdi-skip-next</v-icon>\n                      <span class=\"text-h4\" style=\"margin-left: 20px;\">Skip Vote</span>\n                    </div>\n                  </v-col>\n                  <v-col class=\"col-6\">\n                    <v-btn-toggle v-model=\"votes['skip']\" multiple>\n                      <v-btn v-for=\"(pl) in players\" :key=\"pl.name\" :disabled=\"!isVoteButtonEnabled(pl, -1)\">\n                        <v-avatar tile size=\"16\">\n                          <img v-if=\"isVoteButtonEnabled(pl, -1)\"\n                               :src=\"require('./assets/colors/' + colors[pl.color].color + '.webp')\"\n                               :alt=\"colors[pl.color].color\"/>\n                          <v-icon v-else>mdi-close</v-icon>\n                        </v-avatar>\n                      </v-btn>\n                    </v-btn-toggle>\n                  </v-col>\n                </v-card-text>\n              </v-card>\n            </v-row>\n          </v-col>\n        </v-row>\n        <v-dialog v-model=\"showSettingsDialog\" fullscreen hide-overlay transition=\"dialog-bottom-transition\">\n          <template v-slot:activator=\"{on, attrs}\">\n            <v-btn v-bind=\"attrs\" v-on=\"on\">Show Recommended Settings</v-btn>\n          </template>\n          <v-card>\n            <v-toolbar dark color=\"primary\">\n              <v-btn icon dark @click=\"showSettingsDialog = false\">\n                <v-icon>mdi-close</v-icon>\n              </v-btn>\n              <v-toolbar-title>Recommended Settings</v-toolbar-title>\n            </v-toolbar>\n            <v-card-text class=\"text-left recommended-settings\" style=\"margin-top: 20px;\">\n              <span>Impostors: 2</span>\n              <span>Confirm Ejects: Off</span>\n              <span>Emergency Meetings: 1</span>\n              <span>Anonymous Votes: Off</span>\n              <span>Emergency Cooldown: 15s</span>\n              <span>Discussion Time: 15s</span>\n              <span>Voting Time: 180s</span>\n              <span>Player Speed: 1.25x</span>\n              <span>Crewmate Vision: 0.75x</span>\n              <span>Impostor Vision: 1.5x</span>\n              <span>Kill Cooldown: 30s</span>\n              <span>Kill Distance: Short</span>\n              <span>Task Bar Updates: Meetings</span>\n              <span>Visual Tasks: Off</span>\n              <span>Common Tasks: 2</span>\n              <span>Long Tasks: 2</span>\n              <span>Short Tasks: 4</span>\n            </v-card-text>\n          </v-card>\n        </v-dialog>\n      </v-container>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nconst DEFAULT_PLAYER_LIST = [\n  {\n    name: 'Player 1',\n    impostor: undefined,\n    kills: [],\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 2',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 3',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 4',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 5',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 6',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 7',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 8',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 9',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }, {\n    name: 'Player 10',\n    impostor: undefined,\n    kills: 0,\n    color: null,\n    notes: '',\n    voted_out: false,\n  }\n];\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      //List of players being tracked\n      players: DEFAULT_PLAYER_LIST,\n      //Votes for the previous round\n      voting: [],\n      //Votes for the current round\n      votes: {},\n      //Variables related to voting state\n      isVoting: false,\n      votingRound: 0,\n      //Variables for other UI components\n      colors: [\n        {color: 'red'},\n        {color: 'blue'},\n        {color: 'green'},\n        {color: 'pink'},\n        {color: 'orange'},\n        {color: 'yellow'},\n        {color: 'black'},\n        {color: 'white'},\n        {color: 'purple'},\n        {color: 'brown'},\n        {color: 'cyan'},\n        {color: 'lime'},\n      ],\n      menus: [],\n      show_scores: false,\n      showSettingsDialog: false,\n    }\n  }, computed: {\n    rankScores() {\n      let array = [...this.players];\n      array.sort((a, b) => b['score'] - a['score']);\n      return array;\n    }\n  }, methods: {\n    score() {\n      //Crewmate\n      const POINTS_PER_CREW_WIN = 4;\n      const POINTS_PER_CREW_LOSS = -4;\n      //Impostor\n      const POINTS_PER_IMPOSTOR_WIN = 4;\n      const POINTS_PER_KILL = 1;\n      const POINTS_PER_IMPOSTOR_LOSE = -4;\n      //Both\n      const POINTS_PER_VOTE_OUT_CREW = -2;\n      const POINTS_PER_VOTE_OUT_IMPOSTOR = 1;\n\n      const impostorWin = this.isImpostorWin();\n\n      for (let pl of this.players) {\n        pl.score = 0;\n        pl.score_tally = [];\n        if (pl.impostor) {\n          //Score kills\n          pl.score_tally.push({score: ((pl.kills.length || 0) * POINTS_PER_KILL), reason: 'Kills'})\n          //Score impostor wins\n          if (impostorWin) {\n            pl.score_tally.push({score: POINTS_PER_IMPOSTOR_WIN, reason: 'Impostor Win'})\n          } else {\n            pl.score_tally.push({score: POINTS_PER_IMPOSTOR_LOSE, reason: 'Impostor Loss'})\n          }\n        } else {\n          //Score crewmate wins\n          if (impostorWin) {\n            pl.score_tally.push({score: POINTS_PER_CREW_LOSS, reason: 'Crewmate Loss'})\n          } else {\n            pl.score_tally.push({score: POINTS_PER_CREW_WIN, reason: 'Crewmate Win'})\n          }\n        }\n        //Score votes\n        for (let round of this.voting) {\n          if (round.player_voted_out) {\n            let player = this.players[round.player_voted_out];\n            if (player.impostor) {\n              //Impostors don't gain points for voting out their impostor partner\n              if(!pl.impostor) {\n                pl.score_tally.push({\n                  score: POINTS_PER_VOTE_OUT_IMPOSTOR,\n                  reason: 'Vote Out Impostor (' + player.name + ')'\n                })\n              } else pl.score_tally.push({score: 0, reason: 'No points gained for voting out impostor partner.'})\n            } else {\n              //Impostors don't lose points for voting out crew\n              if(!pl.impostor) {\n                pl.score_tally.push({\n                  score: POINTS_PER_VOTE_OUT_CREW,\n                  reason: 'Vote Out Crewmate (' + player.name + ')'\n                })\n              } else pl.score_tally.push({score: 0, reason: 'No points lost for voting out crewmate as impostor.'})\n            }\n          }\n        }\n        for (let item of pl.score_tally) {\n          pl.score += item.score;\n        }\n        console.log(pl.name, \"earned\", pl.score, \"points.\", pl.score_tally);\n      }\n      this.show_scores = true;\n    },\n    getPodiumIcon(player) {\n      let array = this.rankScores();\n      let i = 0;\n      for (let pl of array) {\n        i++;\n        if (pl.name == player.name) {\n          //We found the player in the sorted array.\n          return 'mdi-numeric-' + i + '-box';\n        }\n      }\n    },\n    saveDarkTheme() {\n      let storage = window.localStorage;\n      storage.setItem('among_us_tracker_theme', this.$vuetify.theme.dark ? 'dark' : 'light');\n    },\n    resetGameAndPlayers() {\n      this.players = DEFAULT_PLAYER_LIST;\n      this.show_scores = false;\n      this.isVoting = false;\n      this.votingRound = 0;\n      this.voting = [];\n      this.votes = {};\n      this.menus = [];\n      let storage = window.localStorage;\n      storage.clear();\n      this.$forceUpdate();\n    },\n    resetGame() {\n      for (let i in this.players) {\n        this.players[i].score = undefined;\n        this.players[i].voted_out = undefined;\n        this.players[i].kills = [];\n      }\n      this.voting = []\n      this.votes = {}\n      this.menus = []\n      this.show_scores = false;\n      this.isVoting = false;\n      this.votingRound = 0;\n    },\n    isImpostorWin() {\n      let crew = 0;\n      let impostors = 0;\n      for (let pl of this.players) {\n        if (pl.impostor && !pl.voted_out) {\n          impostors++;\n        } else if (!pl.impostor && !pl.voted_out && !this.getKilledBy(pl)) {\n          crew++;\n        }\n      }\n      if (impostors >= crew) return true;\n      return false;\n    },\n    isVoteButtonEnabled(pl, i) {\n      if (pl.voted_out || this.getKilledBy(pl)) return false;\n      let vfw = this.votedForWho(pl);\n      let cv = this.playerCanVote(pl);\n      return vfw == i || cv;\n    },\n    votedForWho(pl) {\n      let index = this.getIndex(pl);\n      return this.hasPlayerVoted(index);\n    },\n    playerCanVote(pl) {\n      return this.votedForWho(pl) == undefined;\n    },\n    hasPlayerVoted(i) {\n      for (let v in this.votes) {\n        if (this.votes[v].includes(i)) {\n          return v;\n        }\n      }\n    },\n    startVoting() {\n      this.isVoting = true;\n      this.votingRound++;\n      this.votes = {\n        0: [],\n        1: [],\n        2: [],\n        3: [],\n        4: [],\n        5: [],\n        6: [],\n        7: [],\n        8: [],\n        9: [],\n      };\n    },\n    endVoting() {\n      this.isVoting = false;\n      //Check who was voted out\n      let mostVotedVotes = 0;\n      let mostVotedIndex = null;\n      let tied = true;\n      for (let vote in this.votes) {\n        if (this.votes[vote].length > mostVotedVotes) {\n          mostVotedVotes = this.votes[vote].length;\n          mostVotedIndex = vote;\n          tied = false;\n        } else if (this.votes[vote].length == mostVotedVotes) {\n          tied = true;\n        }\n      }\n      let verdict = \"\";\n      if (tied) {\n        verdict = \"No one was ejected. (Tie)\";\n        this.votes[\"player_voted_out\"] = null;\n      } else if (!this.players[mostVotedIndex]) {\n        verdict = \"No one was ejected. (Skipped)\";\n        this.votes[\"player_voted_out\"] = null;\n      } else {\n        verdict = this.players[mostVotedIndex].name + \" was ejected.\";\n        this.votes[\"player_voted_out\"] = mostVotedIndex;\n        this.players[mostVotedIndex].voted_out = true;\n      }\n      this.votes[\"verdict\"] = verdict;\n      //Store for later\n      this.voting.push(this.votes);\n      this.votes = {};\n    },\n    getIndex(player) {\n      let i = 0;\n      for (let p of this.players) {\n        if (p.name === player.name) {\n          return i;\n        }\n        i++;\n      }\n    },\n    getKilledBy(player) {\n      let i = this.getIndex(player);\n      for (let p of this.players) {\n        if (p.kills && p.kills.includes(i)) {\n          return p;\n        }\n      }\n    },\n    generateKillsMenu(player) {\n      let i = 0;\n      let list = [];\n      for (let p of this.players) {\n        list.push({'text': p.name, 'value': i, 'disabled': !this.canKill(player, p)});\n        i++;\n      }\n      return list;\n    }, canKill(player1, player2) {\n      if (player1.impostor && player2.impostor) return false;\n      if (this.isDeadByPlayer(player2) && this.getKilledBy(player2) !== player1) return false;\n      return player1.name !== player2.name;\n    }, isDeadByPlayer(player) {\n      let i = 0;\n      for (let pl of this.players) {\n        if (pl.name == player.name) {\n          return this.isDead(i);\n        }\n        i++;\n      }\n    }, isDead(i) {\n      for (let pl of this.players) {\n        if (pl.kills && pl.kills.includes(i)) return true;\n      }\n      return false;\n    }, isColorUsed(color) {\n      for (let pl of this.players) {\n        if (pl && pl.color && this.colors[pl.color].color == color) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, watch: {\n    players: {\n      handler: function (val) {\n        let storage = window.localStorage;\n        storage.setItem('among_us_tracker_data', JSON.stringify(val));\n      },\n      deep: true\n    }\n  }, mounted() {\n    let storage = window.localStorage\n    this.$vuetify.theme.dark = storage.getItem('among_us_tracker_theme') == 'dark';\n    let val = storage.getItem('among_us_tracker_data');\n    if (val) {\n      this.players = JSON.parse(val);\n    }\n  }\n}\n</script>\n\n<style scoped>\n@import url(https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css);\n\n.grid-container {\n  display: grid;\n  grid-template-rows: repeat(5, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n}\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n.recommended-settings span {\n  display: block;\n}\n</style>\n"]}